import { BigNumber, ethers } from "ethers";
import { Allowance, Approve, ApproveRoute, ChainData, Config, ExecuteRoute, GetRoute, GetStatus, IsRouteApproved, RouteResponse, StatusResponse, TokenData } from "./types";
export declare class Squid {
    private axiosInstance;
    initialized: boolean;
    config: Config;
    tokens: TokenData[];
    chains: ChainData[];
    axelarscanURL: string | undefined;
    isInMaintenanceMode: boolean;
    maintenanceMessage: string | undefined;
    constructor(config?: Config);
    private validateInit;
    private validateBalanceAndApproval;
    private validateRouteParams;
    private validateTransactionRequest;
    init(): Promise<void>;
    setConfig(config: Config): void;
    getRoute(params: GetRoute): Promise<RouteResponse>;
    executeRoute({ signer, route, executionSettings, overrides }: ExecuteRoute): Promise<ethers.providers.TransactionResponse>;
    getRawTxHex({ nonce, route, overrides, executionSettings }: Omit<ExecuteRoute, "signer"> & {
        nonce: number;
    }): string;
    isRouteApproved({ route, sender }: IsRouteApproved): Promise<{
        isApproved: boolean;
        message: string;
    }>;
    approveRoute({ route, signer, executionSettings, overrides }: ApproveRoute): Promise<boolean>;
    allowance({ owner, spender, tokenAddress, chainId }: Allowance): Promise<BigNumber>;
    approve({ signer, spender, tokenAddress, amount, chainId, overrides }: Approve): Promise<ethers.providers.TransactionResponse>;
    getStatus(params: GetStatus): Promise<StatusResponse>;
    getTokenPrice({ tokenAddress, chainId }: {
        tokenAddress: string;
        chainId: string | number;
    }): Promise<any>;
}
export * from "./types";
